#include "stm32f303xc.h"

volatile int ticks;
volatile int rxData = 0;
void uart_init(void) {
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // enable clock for USART1
	//baud rate = (Fclk/USARTDIV)
	USART1->BRR |= 833; 			//9600 baud Fclk = 8Mhz (RESET VALUE)
	USART1->CR1 |= USART_CR1_RE | USART_CR1_UE;
}
void SysTick_Handler(void) {
	ticks++;
}
/*void delay_ms(int ms) {
 ticks = 0;
 while (ticks < ms)
 ;
 }*/
void delay_ms(int ms) {
	SystemCoreClockUpdate();
	SysTick_Config(SystemCoreClock / 1000);

	ticks = 0;
	while (ticks < ms)
		;
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk); //disable systick
}

int main() {

	RCC->AHBENR |= RCC_AHBENR_GPIOEEN | RCC_AHBENR_GPIOCEN;

	// PE8 gen purpose output (pushpull by default reset state) ONBOARD LED
	GPIOE->MODER |= GPIO_MODER_MODER8_0;

	//set up gpio C4 as AF output pushpull (USART1_TX)	NOT REALLY REQUIRED HERE	(AF7)
	GPIOC->MODER |= GPIO_MODER_MODER4_1;
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_0;
	GPIOC->AFR[0] |= 7 << 16;		//AF7

	//set up gpio C5 as AF input (USART1_RX)  (AF7)
	GPIOC->MODER |= GPIO_MODER_MODER5_1;
	GPIOC->AFR[0] |= 7 << 20;		//AF7

	SystemCoreClockUpdate();
	SysTick_Config(SystemCoreClock / 1000);

	uart_init();

	while (1) {
		if (USART1->ISR & USART_ISR_RXNE) {
			rxData = USART1->RDR;
			if (rxData == 69) {

				//blink
				GPIOE->BSRR |= GPIO_BSRR_BS_8; //set pin high
				delay_ms(500);
				GPIOE->BSRR |= GPIO_BSRR_BR_8; //set pin low
				delay_ms(500);

				rxData = 0;
			}
		}
	}

}
